// Code generated by "stringer -type=operation -trimprefix=op"; DO NOT EDIT.

package gogrep

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[opInvalid-0]
	_ = x[opNode-1]
	_ = x[opNamedNode-2]
	_ = x[opNodeSeq-3]
	_ = x[opNamedNodeSeq-4]
	_ = x[opOptNode-5]
	_ = x[opNamedOptNode-6]
	_ = x[opFieldNode-7]
	_ = x[opNamedFieldNode-8]
	_ = x[opMultiStmt-9]
	_ = x[opMultiExpr-10]
	_ = x[opMultiDecl-11]
	_ = x[opEnd-12]
	_ = x[opBasicLit-13]
	_ = x[opStrictIntLit-14]
	_ = x[opStrictFloatLit-15]
	_ = x[opStrictCharLit-16]
	_ = x[opStrictStringLit-17]
	_ = x[opStrictComplexLit-18]
	_ = x[opIdent-19]
	_ = x[opPkg-20]
	_ = x[opIndexExpr-21]
	_ = x[opSliceExpr-22]
	_ = x[opSliceFromExpr-23]
	_ = x[opSliceToExpr-24]
	_ = x[opSliceFromToExpr-25]
	_ = x[opSliceToCapExpr-26]
	_ = x[opSliceFromToCapExpr-27]
	_ = x[opFuncLit-28]
	_ = x[opCompositeLit-29]
	_ = x[opTypedCompositeLit-30]
	_ = x[opSimpleSelectorExpr-31]
	_ = x[opSelectorExpr-32]
	_ = x[opTypeAssertExpr-33]
	_ = x[opTypeSwitchAssertExpr-34]
	_ = x[opStructType-35]
	_ = x[opInterfaceType-36]
	_ = x[opVoidFuncType-37]
	_ = x[opFuncType-38]
	_ = x[opArrayType-39]
	_ = x[opSliceType-40]
	_ = x[opMapType-41]
	_ = x[opChanType-42]
	_ = x[opKeyValueExpr-43]
	_ = x[opEllipsis-44]
	_ = x[opTypedEllipsis-45]
	_ = x[opStarExpr-46]
	_ = x[opUnaryExpr-47]
	_ = x[opBinaryExpr-48]
	_ = x[opParenExpr-49]
	_ = x[opArgList-50]
	_ = x[opSimpleArgList-51]
	_ = x[opVariadicCallExpr-52]
	_ = x[opNonVariadicCallExpr-53]
	_ = x[opMaybeVariadicCallExpr-54]
	_ = x[opCallExpr-55]
	_ = x[opAssignStmt-56]
	_ = x[opMultiAssignStmt-57]
	_ = x[opBranchStmt-58]
	_ = x[opSimpleLabeledBranchStmt-59]
	_ = x[opLabeledBranchStmt-60]
	_ = x[opSimpleLabeledStmt-61]
	_ = x[opLabeledStmt-62]
	_ = x[opBlockStmt-63]
	_ = x[opExprStmt-64]
	_ = x[opGoStmt-65]
	_ = x[opDeferStmt-66]
	_ = x[opSendStmt-67]
	_ = x[opEmptyStmt-68]
	_ = x[opIncDecStmt-69]
	_ = x[opReturnStmt-70]
	_ = x[opIfStmt-71]
	_ = x[opIfInitStmt-72]
	_ = x[opIfElseStmt-73]
	_ = x[opIfInitElseStmt-74]
	_ = x[opIfNamedOptStmt-75]
	_ = x[opIfNamedOptElseStmt-76]
	_ = x[opSwitchStmt-77]
	_ = x[opSwitchTagStmt-78]
	_ = x[opSwitchInitStmt-79]
	_ = x[opSwitchInitTagStmt-80]
	_ = x[opSelectStmt-81]
	_ = x[opTypeSwitchStmt-82]
	_ = x[opTypeSwitchInitStmt-83]
	_ = x[opCaseClause-84]
	_ = x[opDefaultCaseClause-85]
	_ = x[opCommClause-86]
	_ = x[opDefaultCommClause-87]
	_ = x[opForStmt-88]
	_ = x[opForPostStmt-89]
	_ = x[opForCondStmt-90]
	_ = x[opForCondPostStmt-91]
	_ = x[opForInitStmt-92]
	_ = x[opForInitPostStmt-93]
	_ = x[opForInitCondStmt-94]
	_ = x[opForInitCondPostStmt-95]
	_ = x[opRangeStmt-96]
	_ = x[opRangeKeyStmt-97]
	_ = x[opRangeKeyValueStmt-98]
	_ = x[opRangeClause-99]
	_ = x[opRangeHeader-100]
	_ = x[opRangeKeyHeader-101]
	_ = x[opRangeKeyValueHeader-102]
	_ = x[opFieldList-103]
	_ = x[opUnnamedField-104]
	_ = x[opSimpleField-105]
	_ = x[opField-106]
	_ = x[opMultiField-107]
	_ = x[opValueSpec-108]
	_ = x[opValueInitSpec-109]
	_ = x[opTypedValueInitSpec-110]
	_ = x[opTypedValueSpec-111]
	_ = x[opTypeSpec-112]
	_ = x[opTypeAliasSpec-113]
	_ = x[opFuncDecl-114]
	_ = x[opMethodDecl-115]
	_ = x[opFuncProtoDecl-116]
	_ = x[opMethodProtoDecl-117]
	_ = x[opDeclStmt-118]
	_ = x[opConstDecl-119]
	_ = x[opVarDecl-120]
	_ = x[opTypeDecl-121]
	_ = x[opAnyImportDecl-122]
	_ = x[opImportDecl-123]
	_ = x[opEmptyPackage-124]
}

const _operation_name = "InvalidNodeNamedNodeNodeSeqNamedNodeSeqOptNodeNamedOptNodeFieldNodeNamedFieldNodeMultiStmtMultiExprMultiDeclEndBasicLitStrictIntLitStrictFloatLitStrictCharLitStrictStringLitStrictComplexLitIdentPkgIndexExprSliceExprSliceFromExprSliceToExprSliceFromToExprSliceToCapExprSliceFromToCapExprFuncLitCompositeLitTypedCompositeLitSimpleSelectorExprSelectorExprTypeAssertExprTypeSwitchAssertExprStructTypeInterfaceTypeVoidFuncTypeFuncTypeArrayTypeSliceTypeMapTypeChanTypeKeyValueExprEllipsisTypedEllipsisStarExprUnaryExprBinaryExprParenExprArgListSimpleArgListVariadicCallExprNonVariadicCallExprMaybeVariadicCallExprCallExprAssignStmtMultiAssignStmtBranchStmtSimpleLabeledBranchStmtLabeledBranchStmtSimpleLabeledStmtLabeledStmtBlockStmtExprStmtGoStmtDeferStmtSendStmtEmptyStmtIncDecStmtReturnStmtIfStmtIfInitStmtIfElseStmtIfInitElseStmtIfNamedOptStmtIfNamedOptElseStmtSwitchStmtSwitchTagStmtSwitchInitStmtSwitchInitTagStmtSelectStmtTypeSwitchStmtTypeSwitchInitStmtCaseClauseDefaultCaseClauseCommClauseDefaultCommClauseForStmtForPostStmtForCondStmtForCondPostStmtForInitStmtForInitPostStmtForInitCondStmtForInitCondPostStmtRangeStmtRangeKeyStmtRangeKeyValueStmtRangeClauseRangeHeaderRangeKeyHeaderRangeKeyValueHeaderFieldListUnnamedFieldSimpleFieldFieldMultiFieldValueSpecValueInitSpecTypedValueInitSpecTypedValueSpecTypeSpecTypeAliasSpecFuncDeclMethodDeclFuncProtoDeclMethodProtoDeclDeclStmtConstDeclVarDeclTypeDeclAnyImportDeclImportDeclEmptyPackage"

var _operation_index = [...]uint16{0, 7, 11, 20, 27, 39, 46, 58, 67, 81, 90, 99, 108, 111, 119, 131, 145, 158, 173, 189, 194, 197, 206, 215, 228, 239, 254, 268, 286, 293, 305, 322, 340, 352, 366, 386, 396, 409, 421, 429, 438, 447, 454, 462, 474, 482, 495, 503, 512, 522, 531, 538, 551, 567, 586, 607, 615, 625, 640, 650, 673, 690, 707, 718, 727, 735, 741, 750, 758, 767, 777, 787, 793, 803, 813, 827, 841, 859, 869, 882, 896, 913, 923, 937, 955, 965, 982, 992, 1009, 1016, 1027, 1038, 1053, 1064, 1079, 1094, 1113, 1122, 1134, 1151, 1162, 1173, 1187, 1206, 1215, 1227, 1238, 1243, 1253, 1262, 1275, 1293, 1307, 1315, 1328, 1336, 1346, 1359, 1374, 1382, 1391, 1398, 1406, 1419, 1429, 1441}

func (i operation) String() string {
	if i >= operation(len(_operation_index)-1) {
		return "operation(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _operation_name[_operation_index[i]:_operation_index[i+1]]
}
